sort DestinationID = struct A1 | A2 | I1 | I2 | O1 | O2 | lamp;
     IOHandlerID = struct IOH1 | IOH2;
		 OperationType = struct Get | Put;
		 IPStackState = struct Empty | NonEmpty;
		 OPStackState = struct Full | NonFull;
     DoorID = struct DI1 | DI2 | DO1 | DO2;		
		 DoorState = struct Open | Closed;
		 CycleType = struct Input | Output;

act MoveTo: DestinationID;
	  PickupWafer;
	  PlaceWafer;

	  CheckIPStack1State : IPStackState;
	  CheckOPStack1State : OPStackState;
	  CheckIPStack2State : IPStackState;
	  CheckOPStack2State : OPStackState;

	  receiveOuterDoor1State : DoorState;
	  receiveOuterDoor2State : DoorState;
	  sendOuterDoor1State : DoorState;
	  sendOuterDoor2State : DoorState;
		commOuterDoor1State : DoorState;
		commOuterDoor2State : DoorState;

	  receiveInnerDoor1State : DoorState;
	  receiveInnerDoor2State : DoorState;
	  sendInnerDoor1State : DoorState;
		sendInnerDoor2State : DoorState;
		commInnerDoor1State : DoorState;
		commInnerDoor2State : DoorState;

	  receiveOuterDoor1Request : DoorState;
	  receiveOuterDoor2Request : DoorState;
		sendOuterDoor1Request : DoorState;
		sendOuterDoor2Request : DoorState;
		commOuterDoor1Request : DoorState;
		commOuterDoor2Request : DoorState;

	  receiveInnerDoor1Request : DoorState;
	  receiveInnerDoor2Request : DoorState;
		sendInnerDoor1Request : DoorState;
		sendInnerDoor2Request : DoorState;
		commInnerDoor1Request : DoorState;
		commInnerDoor2Request : DoorState;

		OpenOuterDoor1;
		OpenOuterDoor2;
		OpenInnerDoor1;
		OpenInnerDoor2;


proc

% IO handler 1

%GetProcess1 = (MoveTo(A1) + MoveTo(I1)). PickupWafer. PutProcess1;
%PutProcess1 = (MoveTo(O1)+ MoveTo(A1)) .  PlaceWafer .GetProcess1;

% IO handler 2
%GetProcess2 =( MoveTo(A2) + MoveTo(I2) ). PickupWafer. PutProcess2;
%PutProcess2 = (MoveTo(O2)+ MoveTo(A2)) .  PlaceWafer .GetProcess2;

% Lamp Chamber Handler
%GetProcess3 = (MoveTo(A1) + MoveTo(A2) + MoveTo(lamp)).PickupWafer.PutProcess3;
%PutProcess3 = (MoveTo(A1) + MoveTo(A2) + MoveTo(lamp)).PlaceWafer. GetProcess3;

% Airlock
%AL = sum d: Door . SetDoor(d, open) + sum d: Door . SetDoor(d, closed);

%init GetProcess1 || GetProcess2 || GetProcess3;


IOHandler1(Operation : OperationType, Cycle : CycleType) =
% Input Cycle
((Cycle == Input) && (Operation == Get)) -> CheckIPStack1State(Empty)
.IOHandler1(Operation = Get)
+ ((Cycle == Input) && (Operation == Get)) -> CheckIPStack1State(NonEmpty).MoveTo(I1)
.PickupWafer.IOHandler1(Operation = Put)
+ ((Cycle == Input) && (Operation == Put)) -> receiveOuterDoor1State(Closed)
.sendOuterDoor1Request(Open).IOHandler1(Operation = Put)
+ ((Cycle == Input) && (Operation == Put)) -> receiveOuterDoor1State(Open)
.MoveTo(A1).PlaceWafer.IOHandler1(Cycle = Output, Operation = Get)
% Output Cycle
+ ((Cycle == Output) && (Operation == Get)) -> receiveOuterDoor1State(Closed)
.sendOuterDoor1Request(Open).IOHandler1(Operation = Get)
% MoveTo here may be redundant
+ ((Cycle == Output) && (Operation == Get)) -> receiveOuterDoor1State(Open).MoveTo(A1)
.PickupWafer.IOHandler1(Operation = Put)
+ ((Cycle == Output) && (Operation == Put)) -> CheckOPStack1State(Full)
.IOHandler1(Operation = Put)
+ ((Cycle == Output) && (Operation == Put)) -> CheckOPStack1State(NonFull)
.MoveTo(O1).PlaceWafer.IOHandler1(Cycle = Input, Operation = Get);


IOHandler2(Operation : OperationType, Cycle : CycleType) =
% Input Cycle
((Cycle == Input) && (Operation == Get)) -> CheckIPStack2State(Empty)
.IOHandler2(Operation = Get)
+ ((Cycle == Input) && (Operation == Get)) -> CheckIPStack2State(NonEmpty).MoveTo(I2)
.PickupWafer.IOHandler2(Operation = Put)
+ ((Cycle == Input) && (Operation == Put)) -> receiveOuterDoor2State(Closed)
.sendOuterDoor2Request(Open).IOHandler2(Operation = Put)
+ ((Cycle == Input) && (Operation == Put)) -> receiveOuterDoor2State(Open)
.MoveTo(A2).PlaceWafer.IOHandler2(Cycle = Output, Operation = Get)
% Output Cycle
+ ((Cycle == Output) && (Operation == Get)) -> receiveOuterDoor2State(Closed)
.sendOuterDoor2Request(Open).IOHandler2(Operation = Get)
% MoveTo here may be redundant
+ ((Cycle == Output) && (Operation == Get)) -> receiveOuterDoor2State(Open).MoveTo(A2)
.PickupWafer.IOHandler2(Operation = Put)
+ ((Cycle == Output) && (Operation == Put)) -> CheckOPStack2State(Full)
.IOHandler2(Operation = Put)
+ ((Cycle == Output) && (Operation == Put)) -> CheckOPStack2State(NonFull)
.MoveTo(O2).PlaceWafer.IOHandler2(Cycle = Input, Operation = Get);



AirlockChamber1Controller(OuterDoor1State : DoorState, InnerDoor1State : DoorState) =
((OuterDoor1State == Closed) && (InnerDoor1State == Open)) -> receiveOuterDoor1Request(Open)
.AirlockChamber1Controller(InnerDoor1State = Open)
+ ((OuterDoor1State == Closed) && (InnerDoor1State == Closed)) -> receiveOuterDoor1Request(Open)
%.OpenOuterDoor1.sendOuterDoor1State(Open).AirlockChamber1Controller(OuterDoor1State = Open)
.OpenOuterDoor1.AirlockChamber1Controller(OuterDoor1State = Open)
+ ((OuterDoor1State == Open) && (InnerDoor1State == Closed)) -> receiveInnerDoor1Request(Open)
.AirlockChamber1Controller(OuterDoor1State = Open)
+ ((OuterDoor1State == Closed) && (InnerDoor1State == Closed)) -> receiveInnerDoor1Request(Open)
%.OpenInnerDoor1.sendInnerDoor1State(Open).AirlockChamber1Controller(InnerDoor1State = Open)
.OpenInnerDoor1.AirlockChamber1Controller(InnerDoor1State = Open)
+ sendOuterDoor1State(OuterDoor1State)
+ sendInnerDoor1State(InnerDoor1State);


AirlockChamber2Controller(OuterDoor2State : DoorState, InnerDoor2State : DoorState) =
((OuterDoor2State == Closed) && (InnerDoor2State == Open)) -> receiveOuterDoor2Request(Open)
.AirlockChamber2Controller(InnerDoor2State = Open)
+ ((OuterDoor2State == Closed) && (InnerDoor2State == Closed)) -> receiveOuterDoor2Request(Open)
%.OpenOuterDoor2.sendOuterDoor2State(Open).AirlockChamber2Controller(OuterDoor2State = Open)
.OpenOuterDoor2.AirlockChamber2Controller(OuterDoor2State = Open)
+ ((OuterDoor2State == Open) && (InnerDoor2State == Closed)) -> receiveInnerDoor2Request(Open)
.AirlockChamber2Controller(OuterDoor2State = Open)
+ ((OuterDoor2State == Closed) && (InnerDoor2State == Closed)) -> receiveInnerDoor2Request(Open)
%.OpenInnerDoor2.sendInnerDoor2State(Open).AirlockChamber2Controller(InnerDoor2State = Open)
.OpenInnerDoor2.AirlockChamber2Controller(InnerDoor2State = Open)
+ sendOuterDoor2State(OuterDoor2State)
+ sendInnerDoor2State(InnerDoor2State);


init 

			allow(
						{MoveTo,
	  				 PickupWafer,
	  				 PlaceWafer,
 	    			 CheckIPStack1State,
	  				 CheckOPStack1State,
	  				 CheckIPStack2State,
	  				 CheckOPStack2State,
						 OpenOuterDoor1,
						 OpenOuterDoor2,
						 OpenInnerDoor1,
						 OpenInnerDoor2,

						 commOuterDoor1State,
						 commOuterDoor2State,

						 commInnerDoor1State,
					 	 commInnerDoor2State,

						 commOuterDoor1Request,
						 commOuterDoor2Request,

				 		 commInnerDoor1Request,
						 commInnerDoor2Request},

			comm(
						{receiveOuterDoor1State | sendOuterDoor1State -> commOuterDoor1State,
	  				 receiveOuterDoor2State | sendOuterDoor2State -> commOuterDoor2State,

	  				 receiveInnerDoor1State | sendInnerDoor1State -> commInnerDoor1State,
	  				 receiveInnerDoor2State | sendInnerDoor2State -> commInnerDoor2State,

	 					 receiveOuterDoor1Request | sendOuterDoor1Request -> commOuterDoor1Request,
	  				 receiveOuterDoor2Request | sendOuterDoor2Request -> commOuterDoor2Request,

						 receiveInnerDoor1Request | sendInnerDoor1Request -> commInnerDoor1Request,
	  				 receiveInnerDoor2Request | sendInnerDoor2Request -> commInnerDoor2Request},

						 IOHandler1(Get, Input) || IOHandler2(Get, Input) || AirlockChamber1Controller(Closed, Closed) || AirlockChamber2Controller(Closed, Closed)

					 )
					 );








